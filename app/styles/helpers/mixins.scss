@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

@mixin triangle($dir, $size, $color) {
	content: "";
	position: absolute;
	border: $size transparent solid;

	@if ($dir == "top" or $dir == "up") {
		border-bottom-color: $color;
	} @else if ($dir == "right" or $dir == "after") {
		border-left-color: $color;
	} @else if ($dir == "bottom" or $dir == "down") {
		border-top-color: $color;
	} @else if ($dir == "left" or $dir == "before") {
		border-right-color: $color;
	}
}

@mixin arrow($dir, $size, $color, $bgcolor) {
	&:before,
	&:after {
		content: "";
		position: absolute;
		border: $size transparent solid;
	}

	&:before {
		@if ($dir == "top" or $dir == "up") {
				border-bottom-color: $color;
		}
		@else if ($dir == "right" or $dir == "after") {
				border-left-color: $color;
		}
		@else if ($dir == "bottom" or $dir == "down") {
				border-top-color: $color;
		}
		@else if ($dir == "left" or $dir == "before") {
				border-right-color: $color;
		}
	}

	&:after {
		@if ($dir == "top" or $dir == "up") {
				border-bottom-color: $bgcolor;
		}
		@else if ($dir == "right" or $dir == "after") {
				border-left-color: $bgcolor;
		}
		@else if ($dir == "bottom" or $dir == "down") {
				border-top-color: $bgcolor;
		}
		@else if ($dir == "left" or $dir == "before") {
				border-right-color: $bgcolor;
		}
	}
}

@mixin transition($args:all, $time:0.35s) {
	-webkit-transition: $args $time ease;
	-moz-transition: $args $time ease;
	-ms-transition: $args $time ease;
	-o-transition: $args $time ease;
	transition: $args $time ease;
}

@mixin shadow($dir, $color:rgba(0, 0, 0, 0.5)) {
	@if $dir == "top" {
		-webkit-box-shadow: 0 -5px 5px -5px $color;
		-moz-box-shadow: 0 -5px 5px -5px $color;
		box-shadow: 0 -5px 5px -5px $color;
	} @else {
		-webkit-box-shadow: 0 5px 5px -5px $color;
		-moz-box-shadow: 0 5px 5px -5px $color;
		box-shadow: 0 5px 5px -5px $color;
	}
}

@mixin sprite-width($sprite) {
	width: nth(map-get($sprites, $sprite), 5);
}

@mixin sprite-height($sprite) {
	height: nth(map-get($sprites, $sprite), 6);
}

@mixin sprite-size($sprite) {
	width: nth(map-get($sprites, $sprite), 5);
	height: nth(map-get($sprites, $sprite), 6);
}

@mixin sprite-position($sprite) {
	$sprite-offset-x: nth(map-get($sprites, $sprite), 3);
	$sprite-offset-y: nth(map-get($sprites, $sprite), 4);
	background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite, $map:$sprites) {
	$sprite-image: nth(map-get($map, $sprite), 9);
	background-image: url(#{$sprite-image});
}

@mixin sprite($sprite, $map:$sprites) {
	@include sprite-image($sprite, $map);
	@include sprite-position($sprite);
	@include sprite-width($sprite);
	@include sprite-height($sprite);
}

@mixin sprite-center($sprite, $horrizontal:false) {
	top: 50%;

	@if ($horrizontal) {
		left: 0; right: 0;
		margin: (-(nth(map-get($sprites, $sprite), 6)) / 2) auto 0 auto;
	} @else {
		margin: (-(nth(map-get($sprites, $sprite), 6)) / 2) 0 0 0;
	}
}

@mixin r-sprite($sprite) {
	@include sprite-image($sprite, $sprites);
	@include sprite-position($sprite);
	@include sprite-width($sprite);
	@include sprite-height($sprite);

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		@include sprite-image($sprite, $r-sprites);
		@include sprite-position($sprite);
		@include sprite-width($sprite);
		@include sprite-height($sprite);
		background-size: nth(map-get($sprites, $sprite), 7);
	}
}

@mixin responsive-svg-container($width, $svg-width, $svg-height) {
	height: 0;
	width: $width;
	padding-top: ($svg-height / $svg-width * $width);
	position: relative;
}

@mixin responsive-svg {
	position: absolute;
	top: 0; left: 0;
}